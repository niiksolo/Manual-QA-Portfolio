{
	"info": {
		"_postman_id": "edf1bc67-32e7-4464-8c1f-5383e00221ac",
		"name": "Api manual fake_store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46940334"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.expect(json.length).to.be.above(0);\r",
									"pm.expect(json[0]).to.have.property(\"title\");\r",
									"pm.expect(json[0]).to.have.property(\"price\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product created\", () => pm.response.to.have.status(201));\r",
									"const json = pm.response.json();\r",
									"pm.environment.set(\"product_id\", json.id);\r",
									"pm.expect(json.title).to.eql(\"QA Test Product\");\r",
									"pm.expect(json.price).to.eql(0.99);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{       \r\n        \"title\": \"QA Test Product\",\r\n        \"price\": 0.99,\r\n        \"description\": \"Vkusna\",\r\n        \"category\": \"VODA\",\r\n        \"image\": \"https://fakestoreapi.com/img/61pHAEJ4NML._AC_UX679_t.png\"       \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.expect(json).to.have.property(\"id\");\r",
									"pm.expect(json).to.have.property(\"title\");\r",
									"pm.expect(json.price).to.be.above(0);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/products/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product updated\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.expect(json.title).to.eql(\"QAQAQAQAQAQAQAQA\");\r",
									"pm.expect(json.price).to.eql(10000000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"QAQAQAQAQAQAQAQA\",\r\n    \"price\": 10000000,\r\n    \"description\": \"practice_QA\",\r\n    \"category\": \"QA\",\r\n    \"image\": \"https://fakestoreapi.com/img/71pWzhdJNwL._AC_UL640_QL65_ML3_t.png\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/products/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product deleted\", () => pm.response.to.have.status(200));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/products/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "JSON Schema product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const productSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\"id\", \"title\", \"price\", \"description\", \"category\", \"image\"],\r",
									"  \"properties\": {\r",
									"    \"id\": { \"type\": \"integer\" },\r",
									"    \"title\": { \"type\": \"string\" },\r",
									"    \"price\": { \"type\": \"number\" },\r",
									"    \"description\": { \"type\": \"string\" },\r",
									"    \"category\": { \"type\": \"string\" },\r",
									"    \"image\": { \"type\": \"string\", \"format\": \"uri\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test('Product matches JSON Schema', () => {\r",
									"  pm.response.to.have.jsonSchema(productSchema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/products/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.expect(json.length).to.be.above(0);\r",
									"pm.expect(json[0]).to.have.property(\"id\");\r",
									"pm.expect(json[0]).to.have.property(\"email\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User created\", () => pm.response.to.have.status(201));\r",
									"const json = pm.response.json();\r",
									"pm.environment.set(\"user_id\", json.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 111,\r\n  \"username\": \"niksolo\",\r\n  \"email\": \"st@mail.com\",\r\n  \"password\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.expect(json).to.have.property(\"id\");\r",
									"pm.expect(json).to.have.property(\"email\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/7",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User updated\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.expect(json.username).to.eql(\"nik\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\": \"qam@gmail.com\",\r\n\"username\": \"nik\",\r\n\"password\": 12345678\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/7",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted\", () => pm.response.to.have.status(200));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/7",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "JSON Schema users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const userSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\"id\", \"email\", \"username\", \"name\", \"address\", \"phone\"],\r",
									"  \"properties\": {\r",
									"    \"id\": { \"type\": \"integer\" },\r",
									"    \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"    \"username\": { \"type\": \"string\" },\r",
									"    \"name\": {\r",
									"      \"type\": \"object\",\r",
									"      \"required\": [\"firstname\", \"lastname\"],\r",
									"      \"properties\": {\r",
									"        \"firstname\": { \"type\": \"string\" },\r",
									"        \"lastname\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"address\": {\r",
									"      \"type\": \"object\",\r",
									"      \"required\": [\"city\", \"street\", \"number\", \"zipcode\"],\r",
									"      \"properties\": {\r",
									"        \"city\": { \"type\": \"string\" },\r",
									"        \"street\": { \"type\": \"string\" },\r",
									"        \"number\": { \"type\": \"integer\" },\r",
									"        \"zipcode\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"phone\": { \"type\": \"string\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"const users = pm.response.json();\r",
									"users.forEach(user => {\r",
									"    pm.test(`User ${user.id} matches JSON Schema`, () => {\r",
									"        pm.expect(user).to.have.jsonSchema(userSchema);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Carts",
			"item": [
				{
					"name": "Get all carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.expect(json.length).to.be.above(0);\r",
									"pm.expect(json[0]).to.have.property(\"userId\");\r",
									"pm.expect(json[0]).to.have.property(\"products\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cart exists\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.expect(json).to.have.property(\"id\");\r",
									"pm.expect(json).to.have.property(\"userId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cart created\", () => pm.response.to.have.status(201));\r",
									"const json = pm.response.json();\r",
									"pm.environment.set(\"cart_id\", json.id);\r",
									"pm.expect(json.userId).to.eql(111);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 111,\r\n  \"userId\": 111,\r\n  \"products\": [\r\n    {\r\n      \"id\": 111,\r\n      \"title\": \"QA\",\r\n      \"price\": 0.5,\r\n      \"description\": \"QA\",\r\n      \"category\": \"QA\",\r\n      \"image\": \"http://QA.com\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cart updated\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"id\": 123,\r\n\"userId\": 321,\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/carts/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cart updated\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/6",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "JSON Schema carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const cartSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\"id\", \"userId\", \"date\", \"products\"],\r",
									"  \"properties\": {\r",
									"    \"id\": { \"type\": \"integer\" },\r",
									"    \"userId\": { \"type\": \"integer\" },\r",
									"    \"date\": { \"type\": \"string\" },\r",
									"    \"products\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\"productId\", \"quantity\"],\r",
									"        \"properties\": {\r",
									"          \"productId\": { \"type\": \"integer\" },\r",
									"          \"quantity\": { \"type\": \"integer\" }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test('Cart matches JSON Schema', () => {\r",
									"  pm.response.to.have.jsonSchema(cartSchema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Authenticate a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(201));\r",
									"\r",
									"const json = pm.response.json();\r",
									"pm.environment.set(\"token\", json.token);\r",
									"\r",
									"pm.test(\"Token received\", () => {\r",
									"    pm.expect(json).to.have.property(\"token\");\r",
									"    pm.expect(json.token.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"mor_2314\",\r\n  \"password\": \"83r5^_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized\", () => pm.response.to.have.status(401));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"mor_2314\",\r\n  \"password\": \"wrongpass\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}